* Instruction Set Architecture (ISA) Principles and Example
(指令系统原理与实例)
CPU_Time = IC * CPI * Cycle_time
* Characteristics of Instruction Set
** (堆栈型)栈类型存储 Stack
+ 在运算的时刻不一定从存储器中取来
  + Push B
  + Push A
  + Add 
  + Pop C
+ C = A + B
** 累加器存储 Accumulator
  + Load A
  + Add B
  + Store C
** 寄存器-内存 Register-Memery (通用寄存器)
  + Load R1, A
  + Add R3, R1, B
  + Store R3, C
计算的同时要取数
memory 影响计算速度
** 寄存器-寄存器 (Load-Store) ---RISC 计算机典型架构 适合于流水线
  + Load R1, A
  + Load R2, B
  + Add R3, R1, R2
  + Store R3, C
+ 提前取数到rigister里面 只有Load，Store 访问 memory

** general-Prupose Register(GPR)
根据访存数
** A load-store architecture survived 
+ Register are faster than memory 更快
+ Register are more effcient for a compiler to use 
  + 考虑任意顺序执行
  + 存放变量，减少数据流量，加速程序运行，提高代码密度
** Memory Addressing(cont.)
+ 小段存取
低端对低端
0x0304
|   00 |   01 |
| 0x04 | 0x03 |
Inter 经常采用
+ 大端存取

|   00 |   01 |
| 0x03 | 0x04 |

+ 网络字节序 
在网络上存储的，必须是 *大端对齐*

+ Endian Order is also Important to File Data
+ 内存对齐 
地址不会出现奇数 (mod n = 0) n为偶数

** 优先优化的部分--占得比重大
+ *Register indrrect*
+ *Immediate*
+ *Displacement*
** Displacememt Addressing Mode
+ Whats an appropriate range of the displacements
The size of address should be at least 12- 16 bits,
which capture 75% ~ 99% of the displacements -- Common Case

+ expect 8-16 for immediate
** Type and Size of Operands
+ Vertex 
32bit
+ Pixel
(R,G,B,A) Alpha通道 透明度
8bit * 4
** What operation are Needed
+ Arthemetic and Logical
+ Data Transfer
+ Control
  + Branch,jump, rocedure call and return ,trap
+ System
All computer provide the above operations
** Top 10 ins for the x86
+ load
+ conditional Branch
+ compare
+ store
+ add
+ and
+ sub
+ move register=register
+ call
+ return 
占了全部的96%
** Addressing Modes for Control Flow Instrcutions
+ PC-relative
相对于当前PC值
```
Add(); // define
.
.
.
C = A + B;
D = A + F;
if(C == D) {
   add(B, F);
}
```
