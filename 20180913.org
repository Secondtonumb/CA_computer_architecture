* Instruction Set Architecture (ISA) Principles and Example
(指令系统原理与实例)
CPU_Time = IC * CPI * Cycle_time
* Characteristics of Instruction Set
** (堆栈型)栈类型存储 Stack
+ 在运算的时刻不一定从存储器中取来
  + Push B
  + Push A
  + Add 
  + Pop C
+ C = A + B
** 累加器存储 Accumulator
  + Load A
  + Add B
  + Store C
** 寄存器-内存 Register-Memery (通用寄存器)
  + Load R1, A
  + Add R3, R1, B
  + Store R3, C
计算的同时要取数
memory 影响计算速度
** 寄存器-寄存器 (Load-Store) ---RISC 计算机典型架构 适合于流水线
  + Load R1, A
  + Load R2, B
  + Add R3, R1, R2
  + Store R3, C
+ 提前取数到rigister里面 只有Load，Store 访问 memory

** general-Prupose Register(GPR)
根据访存数
** A load-store architecture survived 
+ Register are faster than memory 更快
+ Register are more effcient for a compiler to use 
  + 考虑任意顺序执行
  + 存放变量，减少数据流量，加速程序运行，提高代码密度
** Memory Addressing(cont.)
+ 小段存取
低端对低端
0x0304
|   00 |   01 |
| 0x04 | 0x03 |
Inter 经常采用
+ 大端存取

|   00 |   01 |
| 0x03 | 0x04 |

+ 网络字节序 
在网络上存储的，必须是 *大端对齐*

+ Endian Order is also Important to File Data
+ 内存对齐 
地址不会出现奇数 (mod n = 0) n为偶数

** 优先优化的部分--占的比重大
+ *Register indirect*
+ *Immediate*
+ *Displacement*
** Displacememt Addressing Mode
+ Whats an appropriate range of the displacements
The size of address should be at least 12- 16 bits,
which capture 75% ~ 99% of the displacements -- Common Case

+ expect 8-16 for immediate
** Type and Size of Operands
+ Vertex 
32bit
+ Pixel
(R,G,B,A) Alpha通道 透明度
8bit * 4
** What operation are Needed
+ Arthemetic and Logical
+ Data Transfer
+ Control
  + Branch,jump, rocedure call and return ,trap
+ System
All computer provide the above operations
** Top 10 ins for the x86
+ load
+ conditional Branch
+ compare
+ store
+ add
+ and
+ sub
+ move register=register
+ call
+ return 
占了全部的96%
** Addressing Modes for Control Flow Instrcutions
+ PC-relative
相对于当前PC值
+ A register contains the target address
+ The jump may permit any addressing mode to be used to supply the target address
** Usage of Register Indirect Jumps
+ Case or switch statements
+ Virtual functionsor methods
+ Hight-order functions 
+ Dynamiccal libraries ? 
一般跳转是 4 - 7 个指令
** 过程调用中寄存器内容的两种保存策略

* Encoding
** Issues on Encoding and Instuction Set
+ Disire for lots of addressing modes and registers
+ Desire for smaller instruction size and program size with more addresing modes and registers
+ Disire to have instruction encoded into lengths 

+ 可变长编码
+ 定长编码
+ 混合编码

* Role of Compilers
** Compilers vs. ISA
+ Almost all programming is  done in high level language(HLL) for desktop and server applications
+ Most instructions executed are the output of a compiler
+ Separation from each other is impratical
** Coals of Compiler
+ Correctness
+ Speed of the compiled code
  + Fast compilation
  + Debugging support
  + Interoperability among languages(可理解为: 不同语言编制的不同组件之间的互操作性)
** Structure of Recent Compilers
Compilers typically consist of two to four passes ,with more highly optiizing compilers having more passes.
Front end per language -> High-level optimizations -> Glabal optimizer -> code generator
中间形式 -> 循环变换过程，内嵌集成 -> 全局优化，局部优化+寄存器分配 -> 指令选择机器相关优化

** Optimization Types
+ Local optimizations
  + DOne on basic sequential bloak(straight line code)
+ Global optimazations
  
+ Register allocation 
  + NP-complete
  + Heuristic algorithm(启发式算法)
** Major types of Optimizations and Example in Each Class
+ Local
+ Common subexpressiong elimination
+ Constant propagation
+ Stack height reduction
** Change in Instruction Count Due to Compiler Optimization
** Optimization Observations
+ Hard to reduce branches
+ Biggest reduction is often memory references

+ 在分支跳转等问题中，必须在运行的时候处理问题(静态处理很难)
*分支预测*
** MIPS64 
+ 32 64-bit integer GPRs
  + R0, R1... R31, R0 == 0
+ 32 FPRs
i.e. 

| 0 | zero | constant 0             |
| 1 | at   | reserved for assembler |
| 2 | v0   | expression evaluation  |
| 3 | v1   | ...                    |

** MIPS Instruction Format 
One instruction is 32 bits
=> divide ins word into fields
+ I-format
+ R-format
+ J-format

