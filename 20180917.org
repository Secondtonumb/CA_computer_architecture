** MIPS Instrction Format
+ I-Type instruction (immediately)
| opcode | rs | rt | immediately |
  + rt <-re op immediate
  + Conditional branches 
    rs is the register checked
    rt unused
+ R-type instruction (register)
| opcode | rs | rt | rd | shamt | func |
  + add, sub, shamt
+ J-type instruction (jump)
| opcode | offset added to PC |
* Pipelining: Basic and Intermediate Concepts 流水线基本原理
+ 流水线不能提高单个任务的执行时间，提高整体工作负载的吞吐量。
+ 流水线的速率受限于最慢的流水段
+ 多个不同人物同时操作，使用不同资源。
+ 潜在加速比 = 流水线的级数
  + 流水段的执行时间不均衡，加速比会降低。
** 流水线的基本概念与实现
+ 流水线技术：讲一个重复的时序过程分解成若干个子过程，而每个子过程都可以有效的在 *其专用功能段* 上与其他子过程同时执行。
+ 流水线中每个子过程及其功能部件成为流水线的段(级)， 段与段之间互相连接形成流水线。
+ 流水线的段数成为流水线的深度
+ not visible to programmers
+ 指令沿流水线移动一次的时间间隔就是一个时间周期(processor cycle)
  + All the stages must be ready to proceed at the same time
  + Slowest pip stage determines processor cycle
  + Processor cycle is usually one clock cycle
  + The piplline designaer's goal is to balance the length of each pipeline stage
等待下一个时钟周期的脉冲
** Benefits of Pipelining 
+ If the stages are perfectly balanced and everything is perfect, then the time per instruction on the pipelined machine is equal to
Time_Per_ins_on_Unpipelined_Machine / Number_of_Pipe_Stages
潜在加速比 = 流水线的级数(理想状态)
+ Completely hardware mechanism --> 纯粹的硬件机制
+ No programming model shift required to expliot this form of concurrency(并行性)
+ All modern machines are pipelined
  + Key tech in advancing performance in th 80's
  + In the 90's we just moved to multiple pipelines
+ Message Passing Interface(MPI)
+ OpenMP(Open Multi-Processing --> 隐式的创建线程
*** The Basics of a RISC Instruction Set(MIPS64)
*指令定长*
*** Three CLasses of Ins of MIPS64
Jumpes 会结束当前流水线~
** A simple Implementation of A RISC Ins Set In a Pipeline Set
+ 5 steps
  + Instrction Fetch cycle(IF) 
    + Fetch the current instruction from memory
    + Update PC -> PC + 4
  + Ins Decode/register fetch cycle(ID) data cache 
    + Decpde the ins and read the registers corresponding to register source specifiers from the register file (fixed-field decoding 固定预编码)
    + 进行分支预判
    + 增加一个加法器
  + Execution / effective address cycle (EX)
  + Memory Access (MEM) --> load store 才去访问内存
    + load: memory does a read
    + read: memory does a write
+ Write-Back cycle(WB)
+ Every instrction takes at most 5 clock cycles
+ branch instructions require 2 / 4 cycles I/O运算的结果
+ store instruction require 4 cycles 不写回？
+ other ins needs 5
cycles
| number |  1 | 2  | 3  | 4   | 5   | 6   | 7   | 8   |  9 |
| i      | IF | ID | EX | MEM | WB  |     |     |     |    |
| i + 1  |    | IF | ID | EX  | MEM | WB  |     |     |    |
| i + 2  |    |    | IF | ID  | EX  | MEM | WB  |     |    |
| i + 3  |    |    |    | IF  | ID  | EX  | MEM | WB  |    |
| i + 4  |    |    |    |     | IF  | ID  | EX  | MEM | WB |
+ 同一个时间寄存机读写？ 先写再读？
 We need to peform two reads and one write every clock Cycle .TO handle reads and a write tothe same regitster, seperate it into half
** Assumption and Observation
+ Data memory reference only occurs at stage 4
+ Register update only occurs at stage 5
*PC问题*: PC + 4 必须在IF段完成，但是分支指令可能会改变PC值，而且还在MEM段记性，这会导致冲突。(和第i+3条的指令产生冲突)
重新组织数据通路，把所有改变PC值得操作都放在IF段进行，在第i+3条指令的IF段来做，因为发生跳转，i+1,i+2,i+3全部作废。
** Pipeline Registers / Latches between Successive Pipeline Stages
每一个时钟周期都需要IR
** Stall (Bubble) 流水线的暂停
+ Ins issued later than this instuction are stalled 后面的停止
+ Ins issued eariler than this ins must continue 前面的仍然执行
+ Structural Hazards 结构冲突
+ 某些功能部件没有充分流水 多个部件重复设置来解决
+ 某些资源没有充分重复设置 
***  当前指令所需要的操作数还在流水线当中:
*数据冲突*
+ Read After Write "Dependence" 真相关
+ Write after read "anti-dependence" 反相关 --> 乱序执行
sub r4, r1, r3
add r1, r2, r3
只要操作数具备，就执行
+ Write after Write "outpute-dependence" 输出相关 --> 乱序执行
+ *结构冲突*
+ *数据冲突* 
+ *控制冲突*
** 解决办法 Forwarding(Bypassing or Short-circuiting) to Avoid Data Hazard 旁路(直接通路/短路)
 + But still data hazard even happenwith forwarding
 直接在产生数据的位置，前递到需要使用的入口。
** How to Detect the Hazard
从硬件检测，当硬件检测到前面的某条指令的结果寄存器就是当前指令的源寄存器时--> 前递
Dependence 是程序的属性,Hazard 是流水线的属性。
Dependence(相关) 不一定存在 Hazard(冲突)
** Software Scheduling to Avoid Load Hazards 软件方法解决
+ 在编译阶段通过重排语序来减少(静态调度)
+ 进入CPU之后才叫做动态调度
